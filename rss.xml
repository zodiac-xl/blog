<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>小龙の博客</title>
    <link>http://zodiac-xl.github.io</link>
    <description>we are young we are strong</description>
    <copyright>Copyright@2015,Zodiac</copyright>
    <pubDate>Sat, 25 Apr 2015 14:23:45 +0000</pubDate>
    <item>
      <title>常用CSS优化总结——网络性能与语法性能建议</title>
      <link>http://zodiac-xl.github.io/%E6%96%87%E6%A1%A3/2015/04/25/%E5%B8%B8%E7%94%A8CSS%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%B8%8E%E8%AF%AD%E6%B3%95%E6%80%A7%E8%83%BD%E5%BB%BA%E8%AE%AE.html</link>
      <description><![CDATA[
]]></description>
      <pubDate>Sat, 25 Apr 2015 14:23:45 +0000</pubDate>
      <guid>http://zodiac-xl.github.io/%E6%96%87%E6%A1%A3/2015/04/25/%E5%B8%B8%E7%94%A8CSS%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%B8%8E%E8%AF%AD%E6%B3%95%E6%80%A7%E8%83%BD%E5%BB%BA%E8%AE%AE.html</guid>
      <content:encoded><![CDATA[<!--more-->


<p>关于CSS的优化工作主要从两个方面着手</p>

<ol>
<li>网络性能：把CSS写到字节数最少，加快下载速度  合并压缩css文件等</li>
<li>语法性能：优化语法  合并css语句</li>
</ol>


<h3>一、CSS压缩</h3>

<p>就是把我们CSS中没用的空白符等删去，达到缩减字符个数的目的</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">.</span><span class="n">test</span><span class="p">{</span>
    <span class="n">background</span><span class="o">-</span><span class="ss">color</span><span class="p">:</span><span class="c1">#ffffff;</span>
    <span class="n">background</span><span class="o">-</span><span class="ss">image</span><span class="p">:</span><span class="n">url</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">jpg</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>


<p>经过压缩后会变成这样：</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">.</span><span class="n">test</span><span class="p">{</span> <span class="n">background</span><span class="o">-</span><span class="ss">color</span><span class="p">:</span><span class="c1">#fff;  background-image:url(a.jpg)}</span></code></pre></div>


<h3>二、gzip压缩</h3>

<p>在没有gzip压缩的情况下，Web服务器直接把html页面、CSS脚本、js脚本发送给浏览器，
而支持gzip的Web服务器将把文件压缩后再发给浏览器，浏览器（支持gzip）在本地进行解压和解码，并显示原文件。
这样大约可以减少70％以上的文件大小，达到网络性能优化的目的。
gzip压缩需要服务器的支持，所以我们需要在服务器端进行配置。</p>

<h3>三、合写CSS属性</h3>

<p>合并font margin/padding background border transform animation等属性的单个属性</p>

<h3>四、利用继承</h3>

<p>CSS的继承机制也可以帮我们再一定程度上缩减字节数，我们知道CSS有很多属性是可以继承的即在父容器设置了默写属性，子容器会默认也使用这些属性，因此如果我们希望全文字体尺寸是14px，大可不必为每个容器设置，只需要在body上设置就可以了</p>

<h3>五、模块化css 利用缓存</h3>

<p>有的页面只会用一个Dialog、有的页面只用到了一个TreeView把css模块化按需加载 还可以单独缓存</p>

<p>模块化后CSS的http请求会增加，为了减少http请求可以使用combo服务。</p>

<h3>六、CSS放在head中，减少repaint和reflow</h3>

<p>浏览器从上到下一边下载html生成DOM tree，一边根据浏览器默认及现有CSS生成render tree来渲染页面，当遇到新的CSS的时候下载并结合现有CSS重新生成render tree，刚才的渲染工作就白费了，如果我们把所有CSS都放到页面顶部，这样就没有重新渲染的过程了。</p>

<ul>
<li><p>reflow：当DOM元素出现隐藏／显示、尺寸变化、位置变化的时候都会让浏览器重新渲染页面，之前渲染工作白费了</p></li>
<li><p>repaint：当元素的背景颜色、边框颜色变化虽然不会引起reflow的变化但是会让浏览器重新渲染该元素。所以我们应该在开始就定义好属性，不让浏览器重复渲染。</p></li>
</ul>


<h3>七、避免适用通配符或隐式通配符</h3>

<p>body * {padding:0;margin:0;}
这是对body的子结点都设置一些属性，但因为CSS继承特性的原因，页面所有元素都会接受这个规则，对于复杂的页面在性能上的影响还是很大的，这并不是说不能使用通配符，而是说使用的时候要注意范围。</p>

<p>一些隐式的通配符
:visible{
  padding:0;
}
这样的几乎就和通配符一样，在使用的时候一定要注意范围限制问题</p>

<h3>八、避免层级或过度限制的CSS</h3>

<p><strong><em>CSS是从右到左解析的</em></strong></p>

<p>不要用标签或 class 来限制 ID 规则
这个应该是个常识，#test.info或者div#test这样的选择器是画蛇添足，id已经可以唯一而且最快的定位一个元素了</p>

<p>不要用标签名限制 class 规则
这个估计被误用的更多，如div.info这样的写法，其实我们可以直接写为.info，从右到左解析的原因可以知道为什么其低效，如果直接使用class不能达到目的，一般情况下应该是class设计的有问题，CSS需要重构了</p>

<p>尽量使用最具体的类别、避免后代选择器、属于标签类别的规则永远不要包含子选择器
这三条规则是想通的，因为从左到右解析关系，在CSS选择器中后代选择器非但没有帮我们加快CSS查找，反而后代选择器是 CSS 中耗费最昂贵的选择器。 它的耗费是极其昂贵的—特别是当选择器在标签或通用类别中，建议是当使用子选择器时要十分谨慎，能免则免。对此我们可以通过具体类别——使用单一或尽量少的class解决。</p>
]]></content:encoded>
      <dc:date>2015-04-25T14:23:45+00:00</dc:date>
    </item>
    <item>
      <title>容易被忽略的css特性</title>
      <link>http://zodiac-xl.github.io/%E6%96%87%E6%A1%A3/2015/04/25/%E5%AE%B9%E6%98%93%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84css%E7%89%B9%E6%80%A7.html</link>
      <description><![CDATA[
]]></description>
      <pubDate>Sat, 25 Apr 2015 14:23:45 +0000</pubDate>
      <guid>http://zodiac-xl.github.io/%E6%96%87%E6%A1%A3/2015/04/25/%E5%AE%B9%E6%98%93%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84css%E7%89%B9%E6%80%A7.html</guid>
      <content:encoded><![CDATA[<!--more-->


<h3>一、层叠等级</h3>

<ul>
<li>原则一：继承不如指定</li>
<li>原则二：#id>.class>标签选择器</li>
<li>原则三：越具体越强大</li>
<li>原则四：标签#id>#id; 标签.class>.class</li>
<li>原则五：原则一>原则二>原则三>原则四</li>
</ul>


<h3>二、:checked选择器范围</h3>

<ul>
<li>熟知的 :checked会选择被选中的checkbox radio</li>
<li>不常见的 option被选择也会应用:checked</li>
</ul>


<h3>三、并不是所有的图片都会被加载</h3>

<ul>
<li><p>写在页面上的img标签，无论显示与否，图片都会被加载</p></li>
<li><p>而使用backgroung-image等css属性为页面添加图片，这些图片不是一定会被加载。</p></li>
<li>没有用到的CSS和父容器的display被设为none的情况，这两种情况下的CSS引用的图片是不会被加载的，而父容器设置visibility属性为hidden仍然会加载图片</li>
</ul>

]]></content:encoded>
      <dc:date>2015-04-25T14:23:45+00:00</dc:date>
    </item>
    <item>
      <title>css规范</title>
      <link>http://zodiac-xl.github.io/%E6%96%87%E6%A1%A3/2015/04/25/css%E8%A7%84%E8%8C%83.html</link>
      <description><![CDATA[文件规范 注释规范 命名规范 书写规范
]]></description>
      <pubDate>Sat, 25 Apr 2015 14:23:45 +0000</pubDate>
      <guid>http://zodiac-xl.github.io/%E6%96%87%E6%A1%A3/2015/04/25/css%E8%A7%84%E8%8C%83.html</guid>
      <content:encoded><![CDATA[<p>文件规范 注释规范 命名规范 书写规范</p>

<!--more-->


<h3>一、文件规范</h3>

<h4>1、文件归档至约定的目录中 所有css可分为两大类：通用类和业务类</h4>

<p>通用类：</p>

<ul>
<li>基本样式库 /css/core</li>
<li>通用UI样式库 /css/lib</li>
<li>JS组件相关样式库 /css/ui</li>
</ul>


<p>业务类</p>

<ul>
<li>电影 /css/movie/</li>
<li>读书 /css/book/</li>
<li>音乐 /css/music/</li>
<li>社区 /css/sns/</li>
</ul>


<p>另外可以对具体的CSS进行文档化的整理</p>

<ul>
<li>reset /css/core/reset.css</li>
<li>通用模块容器 /css/core/mod.css</li>
<li>评星 /css/core/rating.css</li>
<li>通用按钮 /css/core/common_button.css</li>
<li>分页 /css/core/pagination.css</li>
</ul>


<h4>2、文件引入方式：外联 内联 内嵌</h4>

<p>link和style标签都应放在head中；原则上不应使用内嵌方式，避免使用!important，嵌套不要超过一层</p>

<ul>
<li>外联方式：\<link rel=”stylesheet” href=”…” /></li>
<li>内联方式：\<style>…\</style></li>
</ul>


<h4>3、文件名以及编码</h4>

<ul>
<li>文件名必须由小写字母、数字、中划线组成</li>
<li>文件必须使用UTF-8编码，需要在HTML中指定，css中默认为UTF-8。</li>
<li>单个css文件避免过大，不宜维护（建议少于300行）</li>
</ul>


<h3>二、注释规范</h3>

<h4>1、文件顶部注释</h4>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno">1</span> <span class="sr">/*</span>
<span class="lineno">2</span> <span class="sr">* @description: 中文说明</span>
<span class="lineno">3</span> <span class="sr">* @author: name</span>
<span class="lineno">4</span> <span class="sr">* @update: name (2013-04-13 18:32)</span>
<span class="lineno">5</span> <span class="sr">*/</span></code></pre></div>


<h4>2、模块注释（模块注释必须单独一行）</h4>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno">1</span> <span class="sr">/* module: module1 by zodiac */</span>
<span class="lineno">2</span> <span class="err">…</span>
<span class="lineno">3</span> <span class="sr">/* module: module2 by zodiac */</span></code></pre></div>


<h4>3、单行注释和多行注释</h4>

<p>单行注释可以的单独一行，也可以写在行尾，单行注释最多不超过40个汉字或80个英文字符</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">/* this is a short comment */</span></code></pre></div>


<p>多行注释必须写在单独行</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">/*</span>
<span class="sr">* this is comment line 1.</span>
<span class="sr">* this is comment line 2.</span>
<span class="sr">*/</span></code></pre></div>


<h4>4、特殊注释</h4>

<p>用于标注待办、修改信息</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">/* TODO: xxxx by name 2013-04-13 18:32 */</span>
<span class="sr">/* BUGFIX: xxxx by name 2012-04-13 18:32 */</span></code></pre></div>


<h4>5、区域注释</h4>

<p>对于代码区块注释，将样式语句分区块</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">/* Header */</span>
<span class="sr">/* Footer */</span>
<span class="sr">/* Gallery */</span></code></pre></div>


<h3>三、命名规范</h3>

<p>使用有意义的或通用的ID和class命名:ID和class的命名应反映该元素的功能或使用通用名称，而不要用抽象的晦涩的命名。反映元素的使用目的是首选；使用通用名称代表该元素不表特定意义，与其同级元素无异，通常是用于辅助命名；使用功能性或通用的名称可以更适用于文档或模版变化的情况</p>

<ul>
<li>/<em> 不推荐: 无意义 </em>/ #yee-1901 {}</li>
<li>/<em> 不推荐: 与样式相关 </em>/ .button-green {}.clear {}</li>
<li>/<em> 推荐: 特殊性 </em>/ #gallery {}#login {}.video {}</li>
<li>/<em> 推荐: 通用性 </em>/ .aux {}.alt {}</li>
</ul>


<p>常用命名：page、wrap、layout、header(head)、footer(foot、ft)、content(cont)、menu、nav、main、submain、sidebar(side)、logo、banner、title(tit)、popo(pop)、icon、note、btn、txt、iblock、window(win)、tips等</p>

<p>ID和class命名越简短越好，只要足够表达涵义。这样既有助于理解，也能提高代码效率。</p>

<ul>
<li>/<em> 不推荐 </em>/ #navigation {}.atr {}</li>
<li>/<em> 推荐 </em>/ #nav {}.author {}　　　　</li>
</ul>


<p>类型选择器避免同时使用标签、ID和class作为定位一个元素选择器；从性能上考虑也应尽量减少选择器的层级。</p>

<ul>
<li>/<em> 不推荐 </em>/ul#example {}　div.error {}</li>
<li>/<em> 推荐 </em>/#example {}　.error {}</li>
</ul>


<p>命名时需要注意的点：</p>

<ul>
<li>规则命名中，一律采用小写加中划线的方式，不允许使用大写字母或 _</li>
<li>命名避免使用中文拼音，应该采用更简明有语义的英文单词进行组合</li>
<li>命名注意缩写，但是不能盲目缩写，具体请参见常用的CSS命名规则</li>
<li>不允许通过1、2、3等序号进行命名</li>
<li>避免class与id重名</li>
<li>id用于标识模块或页面的某一个父容器区域，名称必须唯一，不要随意新建id</li>
<li>class用于标识某一个类型的对象，命名必须言简意赅。</li>
<li>尽可能提高代码模块的复用，样式尽量用组合的方式</li>
<li>规则名称中不应该包含颜色（red/blue）、定位（left/right）等与具体显示效果相关的信息。应该用意义命名，而不是样式显示结果命名。</li>
</ul>


<h3>4、书写规范</h3>

<h4>1、排版规范</h4>

<p>推荐使用多行形式书写</p>

<ul>
<li>每一条规则的大括号 { 前添加空格；</li>
<li>多个selector共用一个样式集，则多个selector必须写成多行形式；</li>
<li>每一条规则结束的大括号 } 必须与规则选择器的第一个字符对齐；</li>
<li>属性名冒号之前不加空格，冒号之后加空格；</li>
<li>属性值之后添加分号；</li>
</ul>


<h4>2、属性编写顺序</h4>

<ul>
<li>显示属性：display/list-style/position/float/clear …</li>
<li>自身属性（盒模型）：width/height/margin/padding/border</li>
<li>背景：background</li>
<li>行高：line-height</li>
<li>文本属性：color/font/text-decoration/text-align/text-indent/vertical-align/white-space/content…</li>
<li>其他：cursor/z-index/zoom/overflow</li>
<li>CSS3属性：transform/transition/animation/box-shadow/border-radius
如果使用CSS3的属性，如果有必要加入浏览器前缀，则按照 -webkit- / -moz- / -ms- / -o- / std的顺序进行添加，标准属性写在最后。</li>
<li>链接的样式请严格按照如下顺序添加： a:link -> a:visited -> a:hover -> a:active</li>
</ul>


<h4>3、规则书写规范</h4>

<ul>
<li>使用单引号，不允许使用双引号;</li>
<li>每个声明结束都应该带一个分号，不管是不是最后一个声明;</li>
<li>除16进制颜色和字体设置外，CSS文件中的所有的代码都应该小写;</li>
<li>除了重置浏览器默认样式外，禁止直接为html tag添加css样式设置;</li>
<li>每一条规则应该确保选择器唯一，禁止直接为全局.nav/.header/.body等类设置属性;</li>
</ul>


<h4>4、代码性能优化</h4>

<ul>
<li>合并margin、padding、border的-left/-top/-right/-bottom的设置，尽量使用短名称。</li>
<li>选择器应该在满足功能的基础上尽量简短，减少选择器嵌套，查询消耗。但是一定要避免覆盖全局样式设置。</li>
<li>注意选择器的性能，不要使用低性能的选择器。</li>
<li>禁止在css中使用*选择符。</li>
<li>除非必须，否则，一般有class或id的，不需要再写上元素对应的tag。</li>
<li>0后面不需要单位，比如0px可以省略成0，0.8px可以省略成.8px。</li>
<li>如果是16进制表示颜色，则颜色取值应该大写。</li>
<li>如果可以，颜色尽量用三位字符表示，例如#AABBCC写成#ABC 。</li>
<li>如果没有边框时，不要写成border:0，应该写成border:none 。</li>
<li>尽量避免使用AlphaImageLoader 。</li>
<li>在保持代码解耦的前提下，尽量合并重复的样式。</li>
<li>background、font等可以缩写的属性，尽量使用缩写形式 。</li>
</ul>


<h4>5、CSS Hack的使用</h4>

<p>不轻易使用浏览器检测和CSS Hacks，考虑到代码高效率和易管理，虽然这两种方法能快速解决浏览器解析差异，但会降低代码效率且不易管理。
推荐使用下面的：</p>

<p>区别属性：</p>

<table>
<thead>
<tr>
<th>浏览器 </th>
<th> 属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>IE6   </td>
<td>_property:value</td>
</tr>
<tr>
<td>IE7   </td>
<td>*property:value</td>
</tr>
<tr>
<td>IE8   </td>
<td>property:value</td>
</tr>
</tbody>
</table>


<p>区别规则</p>

<table>
<thead>
<tr>
<th>浏览器 </th>
<th> 属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>IE6   </td>
<td> * html selector { ... }</td>
</tr>
<tr>
<td>IE7   </td>
<td> *:first-child+html selector { ... }</td>
</tr>
<tr>
<td>非IE6 </td>
<td> html>body selector { ... }</td>
</tr>
<tr>
<td>firefox only </td>
<td> @-moz-document url-prefix() { ... }</td>
</tr>
<tr>
<td>safari3+/chrome1+</td>
<td> @media all and (-webkit-min-device-pixel-ratio:0) { ... }</td>
</tr>
<tr>
<td>opera only </td>
<td> @media all and (-webkit-min-device-pixel-ratio:1000),not all and (-webkit-min-device-pixel-ratio:0) { ... }</td>
</tr>
<tr>
<td>iphone/moblie webkit </td>
<td> @media screen and (max-device-width:480px) { ... }</td>
</tr>
</tbody>
</table>


<h4>6、字体规则</h4>

<ul>
<li>为了防止文件合并及编码转换时造成问题，建议将样式中文字体名字改成对应的英文名字，如：黑体(SimHei) 宋体(SimSun) 微软雅黑 (Microsoft Yahei，几个单词中间有空格组成的必须加引号)</li>
<li>字体粗细采用具体数值，粗体bold写为700，正常normal写为400</li>
<li>font-size以px pt rem为单位，推荐用px（注：pt为打印版字体大小设置），不允许使用xx-small/x-small/small/medium/large/x-large/xx-large等值</li>
<li>为了对font-family取值进行统一，更好的支持各个操作系统上各个浏览器的兼容性，font-family不允许在业务代码中随意设置</li>
</ul>

]]></content:encoded>
      <dc:date>2015-04-25T14:23:45+00:00</dc:date>
    </item>
    <dc:date>2015-04-25T14:23:45+00:00</dc:date>
  </channel>
</rss>